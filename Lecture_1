https://www.youtube.com/watch?v=89yWXXIOisk&t=76s
->Continous integration and continous delivery (1:37)
->Devloper keep on enhancing and change codes (1:51)
->As the developer keeps change the code, he will deposit into Git (1:59)
->In the scenario there are many developers change codes and commit to Git (2:12) at the
end of the day.
->If there is a bug in any of the code (2:22) so build fails, it will be realy difficult
for us to identify what/where (2:27) exact the code failed on the build and at what(2:30)
point was this is a bug introduced in the code(2:34)
->THen you have to go back and check all the coes created on that day (2:41). It will have a lot
of confustion (2:46)
-> As soon as developers commit to Git repository(2:55), Jenkin will take the last code
and trigger the bulid (2:55)
-> The build notification will be sent out (3:02)
-> If there is any problem or any error (3:05), u will get notified as soon as possible
(3:08). 
->Therefore developers can make an change and commit again and trigger another buil until compleses (
(3:09)(3:11)
->We will know where the codes get break (3:30)
->Once the build is sucess, we can integrate our unit test/acceptance/performance test
(3:36) along with the build (3:37)
->And the post-build action in Jenkins (3:39). It can be automated and deployed (3:44)
->Jenkin can also trigger some test cases or some testing which will be automated (3:50). It will send out the report back to us
(3:53)
->Build is successful and there is no exception due to the change in the code (4:00). However, there is sth brokeen
in that application (4:03). We Will will know it instanly that there is sth broken (4:06) and we can troubleshoot(4:09)
->(4:47) downlaoding and setup
->
->
